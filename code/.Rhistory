gc()
#Install (if necessary) and load required packages
load.libraries = c("rjson", "jsonlite", "tidyverse", "gganimate", "ggpmisc", "ggnewscale", "viridis", "tictoc", "scales", "ggforce", "cowplot", 'here')
install.lib = load.libraries[!load.libraries %in% installed.packages()]
for (libs in install.lib) {install.packages(libs, dependencies = TRUE)}
sapply(load.libraries, require, character = TRUE)
tic()
time_step = seq(0.01,10,0.05) #extra fine scale
#time_step = seq(0.05,10,0.05) #regular scale
#theta_scale = 0.01 #extra fine scale
theta_scale = 0.05 #regular scale
#speed_puck = 90 #ft/s
#speed_puck = 55 #ft/s
#speed_puck = 40 #ft/s
source(here("code","hockey_pipeline.R"))
json_file <- here("data","BDC_2022_passOnly.json")
dat <- fromJSON(json_file)
# Set up the event data to be in a data frame.
json_events <- lapply(dat[1:28], function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
current_event <- as.data.frame(do.call("cbind", json_events))
# Simplify team and opponent team names
current_event$team_name[current_event$team_name=="Olympic (Women) - Canada"]="Canada"
current_event$team_name[current_event$team_name=="Olympic (Women) - United States"]="USA"
current_event$team_name[current_event$team_name=="Olympic (Women) - Finland"]="Finland"
current_event$team_name[current_event$team_name=="Olympic (Women) - Olympic Athletes from Russia"]="ROC"
current_event$team_name[current_event$team_name=="Olympic (Women) - Switzerland"]="Switzerland"
current_event$opp_team_name[current_event$opp_team_name=="Olympic (Women) - Canada"]="Canada"
current_event$opp_team_name[current_event$opp_team_name=="Olympic (Women) - United States"]="USA"
current_event$opp_team_name[current_event$opp_team_name=="Olympic (Women) - Finland"]="Finland"
current_event$opp_team_name[current_event$opp_team_name=="Olympic (Women) - Olympic Athletes from Russia"]="ROC"
current_event$opp_team_name[current_event$opp_team_name=="Olympic (Women) - Switzerland"]="Switzerland"
current_event$x_coord = current_event$x_coord %>% as.double()
current_event$y_coord = current_event$y_coord %>% as.double()
current_event$x_coord_2 = current_event$x_coord_2 %>% as.double()
current_event$y_coord_2 = current_event$y_coord_2 %>% as.double()
#Identify defensive passes to omit
defensive_plays <- current_event$x_coord<100
#correct for flipping the ice
current_event$y_coord = 85-current_event$y_coord
current_event$y_coord_2 = 85-current_event$y_coord_2
# Get estimate for pass speed and angle
vel_ang = calc_vmag_ang(current_event)
current_event$vel_init = vel_ang[,1]
current_event$ang_init = vel_ang[,2]
toc()
#soccer
setwd("C:/Users/Paula/Desktop/SFU/Stat895/Bayesian")
load.libraries = c("here","tidyverse", "ggrepel","ggimage","rstanarm","ggplot2","bayesplot","tictoc","dplyr")
install.lib = load.libraries[!load.libraries %in% installed.packages()]
for (libs in install.lib) {install.packages(libs, dependencies = TRUE)}
sapply(load.libraries, require, character = TRUE)
theme_set(bayesplot::theme_default())
options(scipen = 9999)
load(here("shots2.Rdata"))
#StatsBomb code
Arsenal_shots <- shots2 %>%
dplyr::filter(possession_team$name == 'Arsenal')
#rstanarm
data(Arsenal_shots)
#Arsenal_shots$shot$outcome$name %>% unique()
Arsenal_shots$y = ifelse(Arsenal_shots$shot$outcome$name=="Goal",1,0)
ids = sort(sample(nrow(Arsenal_shots), round(nrow(Arsenal_shots)*0.3)))
test<-Arsenal_shots[ids,]
train<-Arsenal_shots[-ids,]
sqrt((shot_xy[,1]-goal_xy[,1])^2+(shot_xy[,2]-goal_xy[,2])^2)
shot_xy = matrix(unlist(Arsenal_shots$location), ncol = 2, byrow=TRUE)# - x,y of shot
goal_xy = matrix(unlist(Arsenal_shots$shot$end_location), ncol = 2, byrow=TRUE)#- x,y of target
sqrt((shot_xy[,1]-goal_xy[,1])^2+(shot_xy[,2]-goal_xy[,2])^2)
#predictors
#play_pattern$name - describes whether it was a corner kick, penalty shot, regulay play, etc
#player$name - who took the shot
#position$name - what position they play (might not be useful until we use all teams)
shot_xy = matrix(unlist(Arsenal_shots$location), ncol = 2, byrow=TRUE)# - x,y of shot
#soccer
setwd("C:/Users/Paula/Desktop/SFU/Stat895/Bayesian")
load.libraries = c("here","tidyverse", "ggrepel","ggimage","rstanarm","ggplot2","bayesplot","tictoc","dplyr")
install.lib = load.libraries[!load.libraries %in% installed.packages()]
for (libs in install.lib) {install.packages(libs, dependencies = TRUE)}
sapply(load.libraries, require, character = TRUE)
theme_set(bayesplot::theme_default())
options(scipen = 9999)
load(here("shots2.Rdata"))
#StatsBomb code
Arsenal_shots <- shots2 %>%
dplyr::filter(possession_team$name == 'Arsenal')
#rstanarm
data(Arsenal_shots)
#Arsenal_shots$shot$outcome$name %>% unique()
Arsenal_shots$y = ifelse(Arsenal_shots$shot$outcome$name=="Goal",1,0)
ids = sort(sample(nrow(Arsenal_shots), round(nrow(Arsenal_shots)*0.3)))
test<-Arsenal_shots[ids,]
train<-Arsenal_shots[-ids,]
#predictors
#play_pattern$name - describes whether it was a corner kick, penalty shot, regulay play, etc
#player$name - who took the shot
#position$name - what position they play (might not be useful until we use all teams)
shot_xy = matrix(unlist(Arsenal_shots$location), ncol = 2, byrow=TRUE)# - x,y of shot
goal_xy = matrix(unlist(Arsenal_shots$shot$end_location), ncol = 2, byrow=TRUE)#- x,y of target
sqrt((shot_xy[,1]-goal_xy[,1])^2+(shot_xy[,2]-goal_xy[,2])^2)
#soccer
setwd("C:/Users/Paula/Desktop/SFU/Stat895/Bayesian")
load(here("shots2.Rdata"))
#soccer
setwd("C:/Users/Paula/Desktop/SFU/Stat895/Bayesian")
load("shots2.Rdata")
#StatsBomb code
Arsenal_shots <- shots2 %>%
dplyr::filter(possession_team$name == 'Arsenal')
#rstanarm
data(Arsenal_shots)
Arsenal_shots
#Arsenal_shots$shot$outcome$name %>% unique()
Arsenal_shots$y = ifelse(Arsenal_shots$shot$outcome$name=="Goal",1,0)
Arsenal_shots$dist = sqrt((shot_xy[,1]-goal_xy[,1])^2+(shot_xy[,2]-goal_xy[,2])^2)
Arsenal_shots <- shots2 %>%
dplyr::filter(possession_team$name == 'Arsenal')
#rstanarm
data(Arsenal_shots)
#Arsenal_shots$shot$outcome$name %>% unique()
Arsenal_shots$y = ifelse(Arsenal_shots$shot$outcome$name=="Goal",1,0)
shot_xy = matrix(unlist(Arsenal_shots$location), ncol = 2, byrow=TRUE)# - x,y of shot
goal_xy = matrix(unlist(Arsenal_shots$shot$end_location), ncol = 2, byrow=TRUE)#- x,y of target
Arsenal_shots$dist = sqrt((shot_xy[,1]-goal_xy[,1])^2+(shot_xy[,2]-goal_xy[,2])^2)
ids = sort(sample(nrow(Arsenal_shots), round(nrow(Arsenal_shots)*0.3)))
test<-Arsenal_shots[ids,]
train<-Arsenal_shots[-ids,]
#predictors
#rstanarm
#Arsenal_shots$shot$outcome$name %>% unique()
Arsenal_shots$y = ifelse(Arsenal_shots$shot$outcome$name=="Goal",1,0)
shot_xy = matrix(unlist(Arsenal_shots$location), ncol = 2, byrow=TRUE)# - x,y of shot
goal_xy = matrix(unlist(Arsenal_shots$shot$end_location), ncol = 2, byrow=TRUE)#- x,y of target
shot_xy
goal_xy = matrix(unlist(Arsenal_shots$shot$end_location), ncol = 2, byrow=TRUE)#- x,y of target
goal_xy
Arsenal_shots$shot$end_location
goal_xy = matrix(unlist(Arsenal_shots$shot$end_location), ncol = 3, byrow=TRUE)#- x,y of target
do.call(rbind.data.frame, Arsenal_shots$shot$end_location)
library (plyr)
df <- ldply (Arsenal_shots$shot$end_location, data.frame)
df
data.frame(t(sapply(Arsenal_shots$shot$end_location,c)))
df <- data.frame(t(sapply(Arsenal_shots$shot$end_location,c)))
df[1]
df[2]
data.frame(Reduce(rbind, Arsenal_shots$shot$end_location))
Arsenal_shots$shot$end_location[1]
i=1
c(Arsenal_shots$location[[i]],Arsenal_shots$shot$end_location[[i]][1,2])
c(Arsenal_shots$location[[i]],Arsenal_shots$shot$end_location[[i]][1:2])
new_dist = c(Arsenal_shots$location[[i]],Arsenal_shots$shot$end_location[[i]][1:2])
sqrt((new_dist[1]-new_dist[3])^2+(new_dist[2]-new_dist[4])^2)
Arsenal_shots <- shots2 %>%
dplyr::filter(possession_team$name == 'Arsenal')
#rstanarm
#Arsenal_shots$shot$outcome$name %>% unique()
Arsenal_shots$y = ifelse(Arsenal_shots$shot$outcome$name=="Goal",1,0)
dist <- matrix(NA, nrow=nrow(Arsenal_shots), ncol=5)
for(i in 1:nrow(Arsenal_shots)){
new_dist = c(Arsenal_shots$location[[i]],Arsenal_shots$shot$end_location[[i]][1:2])
dist[i,] = c(new_dist,sqrt((new_dist[1]-new_dist[3])^2+(new_dist[2]-new_dist[4])^2))
}
Arsenal_shots$dist = dist
ids = sort(sample(nrow(Arsenal_shots), round(nrow(Arsenal_shots)*0.3)))
test<-Arsenal_shots[ids,]
train<-Arsenal_shots[-ids,]
View(train)
#Install (if necessary) and load required packages
load.libraries = c("rjson", "jsonlite", "tidyverse", "gganimate", "ggpmisc", "ggnewscale", "viridis", "tictoc", "scales", "ggforce", "cowplot", 'here')
install.lib = load.libraries[!load.libraries %in% installed.packages()]
for (libs in install.lib) {install.packages(libs, dependencies = TRUE)}
sapply(load.libraries, require, character = TRUE)
tic()
time_step = seq(0.01,10,0.05) #extra fine scale
#time_step = seq(0.05,10,0.05) #regular scale
#theta_scale = 0.01 #extra fine scale
theta_scale = 0.05 #regular scale
#speed_puck = 90 #ft/s
#speed_puck = 55 #ft/s
#speed_puck = 40 #ft/s
source(here("code","hockey_pipeline.R"))
setwd("C:/Users/Paula/Desktop/Big-Data-Cup-2022-Private/code")
source(here("code","hockey_pipeline.R"))
here("C:/Users/Paula/Desktop/Big-Data-Cup-2022-Private/code")

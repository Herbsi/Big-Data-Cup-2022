speed=10; dir=points$angle*180/pi
blockers_xdef=def_tracks[,'x_ft']; blockers_ydef=def_tracks[,'y_ft']
blockers_xoff=off_tracks[,'x_ft']; blockers_yoff=off_tracks[,'y_ft']
reaction_time = 0; max_speed = 20; blocker_time_multiplier = 5
# i. Determine defenders' positions after reaction_time total seconds at their same speed and direction
angle = case_when(
dir <= 90 ~ 90 - dir,
dir > 90 & dir < 180 ~ dir - 90,
dir > 180 & dir < 270 ~ 270 - dir,
TRUE ~ dir - 270
)
reaction_x = defenders_x + ifelse(dir < 180, cos(angle * pi/180)*(speed * reaction_time), -cos(angle * pi / 180)*(speed * reaction_time))
reaction_y = defenders_y + ifelse(dir > 90 & dir < 270, sin(angle * pi/180)*(speed * reaction_time), -sin((angle * pi)/180)*(speed * reaction_time))
# Set (x1,y1) = location of defender after reaction time, (x2,y2) = target location, (x3,y3) = blocker location
i=1;k=1
x1 = reaction_x[i]; y1 = reaction_y[i]
x2 = target_x[k]; y2 = target_y[k]
# Calculate the perpendicular projection of the blocker's position onto the line formed by the defender and the target
b_def = -((x1-blockers_xdef)*(x2-x1)+(y1-blockers_ydef)*(y2-y1))/((x2-x1)^2+(y2-y1)^2)
intercept_xdef = x1 + b_def*(x2 - x1)
intercept_ydef = (y1 + b_def*(y2 - y1))
intercept_def = data.frame(def_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xdef),y_int = unlist(intercept_ydef))
intercept_def= intercept_def[which((y1-intercept_def$y_int)<=(y1-y2) & 0<(y1-intercept_def$y_int)),]
intercept_def$time = 2*intercept_def$y_int/a
b_off = -((x1-blockers_xoff)*(x2-x1)+(y1-blockers_yoff)*(y2-y1))/((x2-x1)^2+(y2-y1)^2)
intercept_xoff = x1 + b_off*(x2 - x1)
intercept_yoff = (y1 + b_off*(y2 - y1))
intercept_off = data.frame(off_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xoff),y_int = unlist(intercept_yoff))
intercept_off= intercept_off[which((y1-intercept_off$y_int)<=(y1-y2) & 0<(y1-intercept_off$y_int)),]
intercept_off$time = 2*intercept_off$y_int/a
intercept_off
intercept_def$time = 2*intercept_def$vel_y/a
b_off = -((x1-blockers_xoff)*(x2-x1)+(y1-blockers_yoff)*(y2-y1))/((x2-x1)^2+(y2-y1)^2)
intercept_xoff = x1 + b_off*(x2 - x1)
intercept_yoff = (y1 + b_off*(y2 - y1))
intercept_off = data.frame(off_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xoff),y_int = unlist(intercept_yoff))
intercept_off= intercept_off[which((y1-intercept_off$y_int)<=(y1-y2) & 0<(y1-intercept_off$y_int)),]
intercept_off$time = 2*intercept_off$vel_y/a
intercept_off
absval
abs(-2)
intercept_def = data.frame(def_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xdef),y_int = unlist(intercept_ydef))
intercept_def= intercept_def[which((y1-intercept_def$y_int)<=(y1-y2) & 0<(y1-intercept_def$y_int)),]
intercept_def$time = 2*abs(intercept_def$vel_y)/a
b_off = -((x1-blockers_xoff)*(x2-x1)+(y1-blockers_yoff)*(y2-y1))/((x2-x1)^2+(y2-y1)^2)
intercept_xoff = x1 + b_off*(x2 - x1)
intercept_yoff = (y1 + b_off*(y2 - y1))
intercept_off = data.frame(off_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xoff),y_int = unlist(intercept_yoff))
intercept_off= intercept_off[which((y1-intercept_off$y_int)<=(y1-y2) & 0<(y1-intercept_off$y_int)),]
intercept_off$time = 2*abs(intercept_off$vel_y)/a
intercept_off
intercept_def
plot_rink(ggplot(tracks)) +
geom_point(aes(x = x_ft, y = y_ft, fill = team_name), size = 5, shape = 21) +
geom_text(aes(x = x_ft, y = y_ft, label = jersey_number, colour = team_name), size = 3) +
geom_point(aes(x = x_puck, y = y_puck), size = 3, shape = 4) +
geom_point(data = points, aes(x = x_coor, y = y_coor), size = 2, shape = 4) +
geom_point(data =intercept_def,aes(x = x_int, y = y_int),color='light blue', size = 3, shape = 8) +
geom_point(data =intercept_off,aes(x = x_int, y = y_int),color='pink', size = 3, shape = 8) +
scale_colour_manual(values = c("USA" = "white", "Canada" = "white")) +
scale_fill_manual(values = c("USA" = "blue", "Canada" = "red")) +
geom_segment(data = points,aes(x = x_puck, y = y_puck, xend = x_coor, yend = y_coor),linetype=2)+
labs(fill = "Team") +
guides(colour = "none")+
geom_segment(aes(x = x_ft, y = y_ft, xend = x_ft+vel_x, yend = y_ft+vel_y), #/sqrt(vel_x^2+vel_y^2) to get r=1
arrow = arrow(length = unit(0.2, "cm")),size=1, colour='cyan')
intercept_off
intercept_def
vel_x^2+vel_y^2
intercept_off$vel_x^2+intercept_off$vel_y^2
sqrt(intercept_off$vel_x^2+intercept_off$vel_y^2)
sqrt((intercept_off$x_ft-intercept_off$x_int)^2+(intercept_off$y_ft-intercept_off$y_int)^2
)
angle
reaction_x
reaction_y
b_off
intercept_off = data.frame(off_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xoff),y_int = unlist(intercept_yoff))
intercept_off= intercept_off[which((y1-intercept_off$y_int)<=(y1-y2) & 0<(y1-intercept_off$y_int)),]
intercept_off$time = 2*abs(intercept_off$vel_y)/a
intercept_off$h_vel = sqrt(intercept_off$vel_x^2+intercept_off$vel_y^2) #hypotenuse velocity
intercept_off$h_dist = sqrt((intercept_off$x_ft-intercept_off$x_int)^2+(intercept_off$y_ft-intercept_off$y_int)^2)
intercept_off$h_angle = b_off
b_off
intercept_off = data.frame(off_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xoff),y_int = unlist(intercept_yoff))
intercept_off$time = 2*abs(intercept_off$vel_y)/a
intercept_off$h_vel = sqrt(intercept_off$vel_x^2+intercept_off$vel_y^2) #hypotenuse velocity
intercept_off$h_dist = sqrt((intercept_off$x_ft-intercept_off$x_int)^2+(intercept_off$y_ft-intercept_off$y_int)^2)
intercept_off$h_angle = b_off
intercept_off= intercept_off[which((y1-intercept_off$y_int)<=(y1-y2) & 0<(y1-intercept_off$y_int)),]
intercept_off
intercept_off
plot_rink(ggplot(tracks)) +
geom_point(aes(x = x_ft, y = y_ft, fill = team_name), size = 5, shape = 21) +
geom_text(aes(x = x_ft, y = y_ft, label = jersey_number, colour = team_name), size = 3) +
geom_point(aes(x = x_puck, y = y_puck), size = 3, shape = 4) +
geom_point(data = points, aes(x = x_coor, y = y_coor), size = 2, shape = 4) +
geom_point(data =intercept_def,aes(x = x_int, y = y_int),color='light blue', size = 3, shape = 8) +
geom_point(data =intercept_off,aes(x = x_int, y = y_int),color='pink', size = 3, shape = 8) +
scale_colour_manual(values = c("USA" = "white", "Canada" = "white")) +
scale_fill_manual(values = c("USA" = "blue", "Canada" = "red")) +
geom_segment(data = points,aes(x = x_puck, y = y_puck, xend = x_coor, yend = y_coor),linetype=2)+
labs(fill = "Team") +
guides(colour = "none")+
geom_segment(aes(x = x_ft, y = y_ft, xend = x_ft+vel_x, yend = y_ft+vel_y), #/sqrt(vel_x^2+vel_y^2) to get r=1
arrow = arrow(length = unit(0.2, "cm")),size=1, colour='cyan')
intercept_off
arctan((y2 - y1)/(x2 - x1))
atan((y2 - y1)/(x2 - x1))
intercept_off = data.frame(off_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xoff),y_int = unlist(intercept_yoff))
intercept_off$time = 2*abs(intercept_off$vel_y)/a
intercept_off$h_vel = sqrt(intercept_off$vel_x^2+intercept_off$vel_y^2) #hypotenuse velocity
intercept_off$h_dist = sqrt((intercept_off$x_ft-intercept_off$x_int)^2+(intercept_off$y_ft-intercept_off$y_int)^2)
intercept_off$v_dist = sqrt(intercept_off$vel_x^2+intercept_off$y_int^2)
intercept_off$hv_dist = sqrt((intercept_off$x_ft+intercept_off$vel_x-intercept_off$x_int)^2+(intercept_off$y_ft+intercept_off$vel_y-intercept_off$y_int)^2)
intercept_off
plot_rink(ggplot(tracks)) +
geom_point(aes(x = x_ft, y = y_ft, fill = team_name), size = 5, shape = 21) +
geom_text(aes(x = x_ft, y = y_ft, label = jersey_number, colour = team_name), size = 3) +
geom_point(aes(x = x_puck, y = y_puck), size = 3, shape = 4) +
geom_point(data = points, aes(x = x_coor, y = y_coor), size = 2, shape = 4) +
geom_point(data =intercept_def,aes(x = x_int, y = y_int),color='light blue', size = 3, shape = 8) +
geom_point(data =intercept_off,aes(x = x_int, y = y_int),color='pink', size = 3, shape = 8) +
scale_colour_manual(values = c("USA" = "white", "Canada" = "white")) +
scale_fill_manual(values = c("USA" = "blue", "Canada" = "red")) +
geom_segment(data = points,aes(x = x_puck, y = y_puck, xend = x_coor, yend = y_coor),linetype=2)+
labs(fill = "Team") +
guides(colour = "none")+
geom_segment(aes(x = x_ft, y = y_ft, xend = x_ft+vel_x, yend = y_ft+vel_y), #/sqrt(vel_x^2+vel_y^2) to get r=1
arrow = arrow(length = unit(0.2, "cm")),size=1, colour='cyan')
intercept_off
acos((intercept_off$h_dist^2+intercept_off$hv_dist^2-intercept_off$v_dist^2)/(2*intercept_off$h_dist*intercept_off$hv_dist))
intercept_off = data.frame(off_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xoff),y_int = unlist(intercept_yoff))
intercept_off= intercept_off[which((y1-intercept_off$y_int)<=(y1-y2) & 0<(y1-intercept_off$y_int)),]
intercept_off$h_vel = sqrt(intercept_off$vel_x^2+intercept_off$vel_y^2) #hypotenuse velocity
intercept_off$h_dist = sqrt((intercept_off$x_ft-intercept_off$x_int)^2+(intercept_off$y_ft-intercept_off$y_int)^2)
intercept_off$v_dist = sqrt(intercept_off$vel_x^2+intercept_off$y_int^2)
intercept_off$hv_dist = sqrt((intercept_off$x_ft+intercept_off$vel_x-intercept_off$x_int)^2+(intercept_off$y_ft+intercept_off$vel_y-intercept_off$y_int)^2)
intercept_off$int_angle = acos((intercept_off$h_dist^2+intercept_off$hv_dist^2-intercept_off$v_dist^2)/(2*intercept_off$h_dist*intercept_off$hv_dist))
#law of cosines b2=a2+c2-2accos(b)
intercept_off
intercept_off = data.frame(off_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xoff),y_int = unlist(intercept_yoff))
intercept_off= intercept_off[which((y1-intercept_off$y_int)<=(y1-y2) & 0<(y1-intercept_off$y_int)),]
intercept_off$h_vel = sqrt(intercept_off$vel_x^2+intercept_off$vel_y^2) #hypotenuse velocity
intercept_off$h_dist = sqrt((intercept_off$x_ft-intercept_off$x_int)^2+(intercept_off$y_ft-intercept_off$y_int)^2)
intercept_off$v_dist = sqrt(intercept_off$vel_x^2+intercept_off$y_int^2)
intercept_off$hv_dist = sqrt((intercept_off$x_ft+intercept_off$vel_x-intercept_off$x_int)^2+(intercept_off$y_ft+intercept_off$vel_y-intercept_off$y_int)^2)
intercept_off$int_angle = acos((intercept_off$h_dist^2+intercept_off$v_dist^2-intercept_off$hv_dist^2)/(2*intercept_off$h_dist*intercept_off$v_dist))
intercept_off
plot_rink(ggplot(tracks)) +
geom_point(aes(x = x_ft, y = y_ft, fill = team_name), size = 5, shape = 21) +
geom_text(aes(x = x_ft, y = y_ft, label = jersey_number, colour = team_name), size = 3) +
geom_point(aes(x = x_puck, y = y_puck), size = 3, shape = 4) +
geom_point(data = points, aes(x = x_coor, y = y_coor), size = 2, shape = 4) +
geom_point(data =intercept_def,aes(x = x_int, y = y_int),color='light blue', size = 3, shape = 8) +
geom_point(data =intercept_off,aes(x = x_int, y = y_int),color='pink', size = 3, shape = 8) +
scale_colour_manual(values = c("USA" = "white", "Canada" = "white")) +
scale_fill_manual(values = c("USA" = "blue", "Canada" = "red")) +
geom_segment(data = points,aes(x = x_puck, y = y_puck, xend = x_coor, yend = y_coor),linetype=2)+
labs(fill = "Team") +
guides(colour = "none")+
geom_segment(aes(x = x_ft, y = y_ft, xend = x_ft+vel_x, yend = y_ft+vel_y), #/sqrt(vel_x^2+vel_y^2) to get r=1
arrow = arrow(length = unit(0.2, "cm")),size=1, colour='cyan')
intercept_off
intercept_def = data.frame(def_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xdef),y_int = unlist(intercept_ydef))
intercept_def= intercept_def[which((y1-intercept_def$y_int)<=(y1-y2) & 0<(y1-intercept_def$y_int)),]
intercept_def$h_vel = sqrt(intercept_def$vel_x^2+intercept_def$vel_y^2) #hypotenuse velocity
intercept_def$h_dist = sqrt((intercept_def$x_ft-intercept_def$x_int)^2+(intercept_def$y_ft-intercept_def$y_int)^2)
intercept_def$v_dist = sqrt(intercept_def$vel_x^2+intercept_def$y_int^2)
intercept_def$hv_dist = sqrt((intercept_def$x_ft+intercept_def$vel_x-intercept_def$x_int)^2+(intercept_def$y_ft+intercept_def$vel_y-intercept_def$y_int)^2)
intercept_def$int_angle = acos((intercept_def$h_dist^2+intercept_def$v_dist^2-intercept_def$hv_dist^2)/(2*intercept_def$h_dist*intercept_def$v_dist))
#law of cosines b2=a2+c2-2accos(b)
intercept_def
plot_rink(ggplot(tracks)) +
geom_point(aes(x = x_ft, y = y_ft, fill = team_name), size = 5, shape = 21) +
geom_text(aes(x = x_ft, y = y_ft, label = jersey_number, colour = team_name), size = 3) +
geom_point(aes(x = x_puck, y = y_puck), size = 3, shape = 4) +
geom_point(data = points, aes(x = x_coor, y = y_coor), size = 2, shape = 4) +
geom_point(data =intercept_def,aes(x = x_int, y = y_int),color='light blue', size = 3, shape = 8) +
geom_point(data =intercept_off,aes(x = x_int, y = y_int),color='pink', size = 3, shape = 8) +
scale_colour_manual(values = c("USA" = "white", "Canada" = "white")) +
scale_fill_manual(values = c("USA" = "blue", "Canada" = "red")) +
geom_segment(data = points,aes(x = x_puck, y = y_puck, xend = x_coor, yend = y_coor),linetype=2)+
labs(fill = "Team") +
guides(colour = "none")+
geom_segment(aes(x = x_ft, y = y_ft, xend = x_ft+vel_x, yend = y_ft+vel_y), #/sqrt(vel_x^2+vel_y^2) to get r=1
arrow = arrow(length = unit(0.2, "cm")),size=1, colour='cyan')
intercept_def
intercept_def$x_ft+intercept_def$vel_x
intercept_def$x_int
intercept_def$x_ft+intercept_def$vel_x-intercept_def$x_int
intercept_def$x_ft+intercept_def$vel_x-intercept_def$x_int
plot_rink(ggplot(tracks)) +
geom_point(aes(x = x_ft, y = y_ft, fill = team_name), size = 5, shape = 21) +
geom_text(aes(x = x_ft, y = y_ft, label = jersey_number, colour = team_name), size = 3) +
geom_point(aes(x = x_puck, y = y_puck), size = 3, shape = 4) +
geom_point(data = points, aes(x = x_coor, y = y_coor), size = 2, shape = 4) +
geom_point(data =intercept_def,aes(x = x_int, y = y_int),color='light blue', size = 3, shape = 8) +
geom_point(data =intercept_off,aes(x = x_int, y = y_int),color='pink', size = 3, shape = 8) +
scale_colour_manual(values = c("USA" = "white", "Canada" = "white")) +
scale_fill_manual(values = c("USA" = "blue", "Canada" = "red")) +
geom_segment(data = points,aes(x = x_puck, y = y_puck, xend = x_coor, yend = y_coor),linetype=2)+
labs(fill = "Team") +
guides(colour = "none")+
geom_segment(aes(x = x_ft, y = y_ft, xend = x_ft+vel_x, yend = y_ft+vel_y), #/sqrt(vel_x^2+vel_y^2) to get r=1
arrow = arrow(length = unit(0.2, "cm")),size=1, colour='cyan')
intercept_def = data.frame(def_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xdef),y_int = unlist(intercept_ydef))
intercept_def= intercept_def[which((y1-intercept_def$y_int)<=(y1-y2) & 0<(y1-intercept_def$y_int)),]
intercept_def$h_vel = sqrt(intercept_def$vel_x^2+intercept_def$vel_y^2) #hypotenuse velocity
intercept_def$h_dist = sqrt((intercept_def$x_ft-intercept_def$x_int)^2+(intercept_def$y_ft-intercept_def$y_int)^2)
intercept_def$v_dist = sqrt(intercept_def$vel_x^2+intercept_def$vel_y^2)
intercept_def$hv_dist = sqrt((intercept_def$x_ft+intercept_def$vel_x-intercept_def$x_int)^2+(intercept_def$y_ft+intercept_def$vel_y-intercept_def$y_int)^2)
intercept_def$int_angle = acos((intercept_def$h_dist^2+intercept_def$v_dist^2-intercept_def$hv_dist^2)/(2*intercept_def$h_dist*intercept_def$v_dist))
#law of cosines b2=a2+c2-2accos(b)
intercept_def
intercept_def = data.frame(def_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xdef),y_int = unlist(intercept_ydef))
intercept_def= intercept_def[which((y1-intercept_def$y_int)<=(y1-y2) & 0<(y1-intercept_def$y_int)),]
intercept_def$h_vel = sqrt(intercept_def$vel_x^2+intercept_def$vel_y^2) #hypotenuse velocity
intercept_def$h_dist = sqrt((intercept_def$x_ft-intercept_def$x_int)^2+(intercept_def$y_ft-intercept_def$y_int)^2)
intercept_def$v_dist = sqrt(intercept_def$vel_x^2+intercept_def$vel_y^2)
intercept_def$hv_dist = sqrt((intercept_def$x_ft+intercept_def$vel_x-intercept_def$x_int)^2+(intercept_def$y_ft+intercept_def$vel_y-intercept_def$y_int)^2)
intercept_def$int_angle = acos((intercept_def$h_dist^2+intercept_def$v_dist^2-intercept_def$hv_dist^2)/(2*intercept_def$h_dist*intercept_def$v_dist))
#law of cosines b2=a2+c2-2accos(b)
b_off = -((x1-blockers_xoff)*(x2-x1)+(y1-blockers_yoff)*(y2-y1))/((x2-x1)^2+(y2-y1)^2)
intercept_xoff = x1 + b_off*(x2 - x1)
intercept_yoff = (y1 + b_off*(y2 - y1))
intercept_off = data.frame(off_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xoff),y_int = unlist(intercept_yoff))
intercept_off= intercept_off[which((y1-intercept_off$y_int)<=(y1-y2) & 0<(y1-intercept_off$y_int)),]
intercept_off$h_vel = sqrt(intercept_off$vel_x^2+intercept_off$vel_y^2) #hypotenuse velocity
intercept_off$h_dist = sqrt((intercept_off$x_ft-intercept_off$x_int)^2+(intercept_off$y_ft-intercept_off$y_int)^2)
intercept_off$v_dist = sqrt(intercept_off$vel_x^2+intercept_off$vel_y^2)
intercept_off$hv_dist = sqrt((intercept_off$x_ft+intercept_off$vel_x-intercept_off$x_int)^2+(intercept_off$y_ft+intercept_off$vel_y-intercept_off$y_int)^2)
intercept_off$int_angle = acos((intercept_off$h_dist^2+intercept_off$v_dist^2-intercept_off$hv_dist^2)/(2*intercept_off$h_dist*intercept_off$v_dist))
#law of cosines b2=a2+c2-2accos(b)
plot_rink(ggplot(tracks)) +
geom_point(aes(x = x_ft, y = y_ft, fill = team_name), size = 5, shape = 21) +
geom_text(aes(x = x_ft, y = y_ft, label = jersey_number, colour = team_name), size = 3) +
geom_point(aes(x = x_puck, y = y_puck), size = 3, shape = 4) +
geom_point(data = points, aes(x = x_coor, y = y_coor), size = 2, shape = 4) +
geom_point(data =intercept_def,aes(x = x_int, y = y_int),color='light blue', size = 3, shape = 8) +
geom_point(data =intercept_off,aes(x = x_int, y = y_int),color='pink', size = 3, shape = 8) +
scale_colour_manual(values = c("USA" = "white", "Canada" = "white")) +
scale_fill_manual(values = c("USA" = "blue", "Canada" = "red")) +
geom_segment(data = points,aes(x = x_puck, y = y_puck, xend = x_coor, yend = y_coor),linetype=2)+
labs(fill = "Team") +
guides(colour = "none")+
geom_segment(aes(x = x_ft, y = y_ft, xend = x_ft+vel_x, yend = y_ft+vel_y), #/sqrt(vel_x^2+vel_y^2) to get r=1
arrow = arrow(length = unit(0.2, "cm")),size=1, colour='cyan')
intercept_off
intercept_def
sqrt((x_puck-intercept_def$x_int)^2+(y_puck-intercept_def$y_int)^2)/s
sqrt((intercept_def$x_ft-intercept_def$x_int)^2+(intercept_def$y_ft-intercept_def$y_int)^2)/intercept_def$h_vel
intercept_off = data.frame(off_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xoff),y_int = unlist(intercept_yoff))
intercept_off= intercept_off[which((y1-intercept_off$y_int)<=(y1-y2) & 0<(y1-intercept_off$y_int)),]
intercept_off$h_vel = sqrt(intercept_off$vel_x^2+intercept_off$vel_y^2) #hypotenuse velocity
intercept_off$h_dist = sqrt((intercept_off$x_ft-intercept_off$x_int)^2+(intercept_off$y_ft-intercept_off$y_int)^2)
intercept_off$v_dist = sqrt(intercept_off$vel_x^2+intercept_off$vel_y^2)
intercept_off$hv_dist = sqrt((intercept_off$x_ft+intercept_off$vel_x-intercept_off$x_int)^2+(intercept_off$y_ft+intercept_off$vel_y-intercept_off$y_int)^2)
intercept_off$int_angle = acos((intercept_off$h_dist^2+intercept_off$v_dist^2-intercept_off$hv_dist^2)/(2*intercept_off$h_dist*intercept_off$v_dist))
#law of cosines b2=a2+c2-2accos(b), angle in radians
intercept_off$puck_2_p = sqrt((x_puck-intercept_off$x_int)^2+(y_puck-intercept_off$y_int)^2)/s
intercept_off$player_2_p = sqrt((intercept_off$x_ft-intercept_off$x_int)^2+(intercept_off$y_ft-intercept_off$y_int)^2)/intercept_off$h_vel
intercept_off
def_min
points
off_min = min(sqrt((points$'x_coor'-off_tracks$x_ft)^2+(points$'y_coor'-off_tracks$y_ft)^2))
def_min = min(sqrt((points$'x_coor'-def_tracks$x_ft)^2+(points$'y_coor'-def_tracks$y_ft)^2))
off_min
def_min
off_time_2_p = sqrt((points$'x_coor'-off_tracks$x_ft)^2+(points$'y_coor'-off_tracks$y_ft)^2)
def_time_2_p = sqrt((points$'x_coor'-def_tracks$x_ft)^2+(points$'y_coor'-def_tracks$y_ft)^2)
off_time_2_p
def_time_2_p
off_tracks[which.min(off_time_2_p),]
off_time_2_p = sqrt((points$'x_coor'-off_tracks$x_ft)^2+(points$'y_coor'-off_tracks$y_ft)^2)
def_time_2_p = sqrt((points$'x_coor'-def_tracks$x_ft)^2+(points$'y_coor'-def_tracks$y_ft)^2)
off_min = rbind(off_tracks[which.min(off_time_2_p),],min=min(off_time_2_p))
def_min = rbind(def_tracks[which.min(def_time_2_p),],min=min(def_time_2_p))
off_min
def_min
off_min
off_time_2_p = sqrt((points$'x_coor'-off_tracks$x_ft)^2+(points$'y_coor'-off_tracks$y_ft)^2)
def_time_2_p = sqrt((points$'x_coor'-def_tracks$x_ft)^2+(points$'y_coor'-def_tracks$y_ft)^2)
off_min = cbind(off_tracks[which.min(off_time_2_p),],min=min(off_time_2_p))
def_min = cbind(def_tracks[which.min(def_time_2_p),],min=min(def_time_2_p))
off_min
off_tracks[which.min(off_time_2_p),]
off_tracks[which.min(off_time_2_p),]
off_time_2_p = sqrt((points$'x_coor'-off_tracks$x_ft)^2+(points$'y_coor'-off_tracks$y_ft)^2)
def_time_2_p = sqrt((points$'x_coor'-def_tracks$x_ft)^2+(points$'y_coor'-def_tracks$y_ft)^2)
off_min = off_tracks[which.min(off_time_2_p),]
off_min$min_d=min(off_time_2_p)
off_min$min_t=min(off_time_2_p)/sqrt(off_min$vel_x^2+off_min$vel_y^2)
def_min = cbind(def_tracks[which.min(def_time_2_p),],min=min(def_time_2_p))
def_min$min_d=min(def_time_2_p)
def_min$min_t=min(def_time_2_p)/sqrt(def_min$vel_x^2+def_min$vel_y^2)
off_min
def_min
plot_rink(ggplot(tracks)) +
geom_point(aes(x = x_ft, y = y_ft, fill = team_name), size = 5, shape = 21) +
geom_text(aes(x = x_ft, y = y_ft, label = jersey_number, colour = team_name), size = 3) +
geom_point(aes(x = x_puck, y = y_puck), size = 3, shape = 4) +
geom_point(data = points, aes(x = x_coor, y = y_coor), size = 2, shape = 4) +
geom_point(data =intercept_def,aes(x = x_int, y = y_int),color='light blue', size = 3, shape = 8) +
geom_point(data =intercept_off,aes(x = x_int, y = y_int),color='pink', size = 3, shape = 8) +
scale_colour_manual(values = c("USA" = "white", "Canada" = "white")) +
scale_fill_manual(values = c("USA" = "blue", "Canada" = "red")) +
geom_segment(data = points,aes(x = x_puck, y = y_puck, xend = x_coor, yend = y_coor),linetype=2)+
labs(fill = "Team") +
guides(colour = "none")+
geom_segment(aes(x = x_ft, y = y_ft, xend = x_ft+vel_x, yend = y_ft+vel_y), #/sqrt(vel_x^2+vel_y^2) to get r=1
arrow = arrow(length = unit(0.2, "cm")),size=1, colour='cyan')
def_min
off_min
intercept_off
intercept_def
s=40 #40 m/s puck speed
teams = tracks$team_name %>% unique()
defence = teams[-which(teams==offence)]
off_tracks = tracks %>% filter(team_name==offence)
def_tracks = tracks %>% filter(team_name==defence)
off_time_2_p = sqrt((points$'x_coor'-off_tracks$x_ft)^2+(points$'y_coor'-off_tracks$y_ft)^2)
def_time_2_p = sqrt((points$'x_coor'-def_tracks$x_ft)^2+(points$'y_coor'-def_tracks$y_ft)^2)
off_min = off_tracks[which.min(off_time_2_p),]
off_min$min_d=min(off_time_2_p)
off_min$min_t=min(off_time_2_p)/sqrt(off_min$vel_x^2+off_min$vel_y^2)
def_min = cbind(def_tracks[which.min(def_time_2_p),],min=min(def_time_2_p))
def_min$min_d=min(def_time_2_p)
def_min$min_t=min(def_time_2_p)/sqrt(def_min$vel_x^2+def_min$vel_y^2)
target_x = points$x_coor; target_y=points$y_coor
defenders_x=x_puck; defenders_y=y_puck
speed=10; dir=points$angle*180/pi
blockers_xdef=def_tracks[,'x_ft']; blockers_ydef=def_tracks[,'y_ft']
blockers_xoff=off_tracks[,'x_ft']; blockers_yoff=off_tracks[,'y_ft']
reaction_time = 0; max_speed = 20; blocker_time_multiplier = 5
# i. Determine defenders' positions after reaction_time total seconds at their same speed and direction
angle = case_when(
dir <= 90 ~ 90 - dir,
dir > 90 & dir < 180 ~ dir - 90,
dir > 180 & dir < 270 ~ 270 - dir,
TRUE ~ dir - 270
)
reaction_x = defenders_x + ifelse(dir < 180, cos(angle * pi/180)*(speed * reaction_time), -cos(angle * pi / 180)*(speed * reaction_time))
reaction_y = defenders_y + ifelse(dir > 90 & dir < 270, sin(angle * pi/180)*(speed * reaction_time), -sin((angle * pi)/180)*(speed * reaction_time))
# Set (x1,y1) = location of defender after reaction time, (x2,y2) = target location, (x3,y3) = blocker location
i=1;k=1
x1 = reaction_x[i]; y1 = reaction_y[i]
x2 = target_x[k]; y2 = target_y[k]
# Calculate the perpendicular projection of the blocker's position onto the line formed by the defender and the target
b_def = -((x1-blockers_xdef)*(x2-x1)+(y1-blockers_ydef)*(y2-y1))/((x2-x1)^2+(y2-y1)^2)
intercept_xdef = x1 + b_def*(x2 - x1)
intercept_ydef = (y1 + b_def*(y2 - y1))
intercept_def = data.frame(def_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xdef),y_int = unlist(intercept_ydef))
intercept_def= intercept_def[which((y1-intercept_def$y_int)<=(y1-y2) & 0<(y1-intercept_def$y_int)),]
intercept_def$h_vel = sqrt(intercept_def$vel_x^2+intercept_def$vel_y^2) #hypotenuse velocity
intercept_def$h_dist = sqrt((intercept_def$x_ft-intercept_def$x_int)^2+(intercept_def$y_ft-intercept_def$y_int)^2)
intercept_def$v_dist = sqrt(intercept_def$vel_x^2+intercept_def$vel_y^2)
intercept_def$hv_dist = sqrt((intercept_def$x_ft+intercept_def$vel_x-intercept_def$x_int)^2+(intercept_def$y_ft+intercept_def$vel_y-intercept_def$y_int)^2)
intercept_def$int_angle = acos((intercept_def$h_dist^2+intercept_def$v_dist^2-intercept_def$hv_dist^2)/(2*intercept_def$h_dist*intercept_def$v_dist))
#law of cosines b2=a2+c2-2accos(b), angle in radians
intercept_def$puck_2_p = sqrt((x_puck-intercept_def$x_int)^2+(y_puck-intercept_def$y_int)^2)/s
intercept_off$player_2_p = sqrt((intercept_def$x_ft-intercept_def$x_int)^2+(intercept_def$y_ft-intercept_def$y_int)^2)/intercept_def$h_vel
s=40 #40 m/s puck speed
teams = tracks$team_name %>% unique()
defence = teams[-which(teams==offence)]
off_tracks = tracks %>% filter(team_name==offence)
def_tracks = tracks %>% filter(team_name==defence)
off_time_2_p = sqrt((points$'x_coor'-off_tracks$x_ft)^2+(points$'y_coor'-off_tracks$y_ft)^2)
def_time_2_p = sqrt((points$'x_coor'-def_tracks$x_ft)^2+(points$'y_coor'-def_tracks$y_ft)^2)
off_min = off_tracks[which.min(off_time_2_p),]
off_min$min_d=min(off_time_2_p)
off_min$min_t=min(off_time_2_p)/sqrt(off_min$vel_x^2+off_min$vel_y^2)
def_min = cbind(def_tracks[which.min(def_time_2_p),],min=min(def_time_2_p))
def_min$min_d=min(def_time_2_p)
def_min$min_t=min(def_time_2_p)/sqrt(def_min$vel_x^2+def_min$vel_y^2)
target_x = points$x_coor; target_y=points$y_coor
defenders_x=x_puck; defenders_y=y_puck
speed=10; dir=points$angle*180/pi
blockers_xdef=def_tracks[,'x_ft']; blockers_ydef=def_tracks[,'y_ft']
blockers_xoff=off_tracks[,'x_ft']; blockers_yoff=off_tracks[,'y_ft']
reaction_time = 0; max_speed = 20; blocker_time_multiplier = 5
# i. Determine defenders' positions after reaction_time total seconds at their same speed and direction
angle = case_when(
dir <= 90 ~ 90 - dir,
dir > 90 & dir < 180 ~ dir - 90,
dir > 180 & dir < 270 ~ 270 - dir,
TRUE ~ dir - 270
)
reaction_x = defenders_x + ifelse(dir < 180, cos(angle * pi/180)*(speed * reaction_time), -cos(angle * pi / 180)*(speed * reaction_time))
reaction_y = defenders_y + ifelse(dir > 90 & dir < 270, sin(angle * pi/180)*(speed * reaction_time), -sin((angle * pi)/180)*(speed * reaction_time))
# Set (x1,y1) = location of defender after reaction time, (x2,y2) = target location, (x3,y3) = blocker location
i=1;k=1
x1 = reaction_x[i]; y1 = reaction_y[i]
x2 = target_x[k]; y2 = target_y[k]
# Calculate the perpendicular projection of the blocker's position onto the line formed by the defender and the target
b_def = -((x1-blockers_xdef)*(x2-x1)+(y1-blockers_ydef)*(y2-y1))/((x2-x1)^2+(y2-y1)^2)
intercept_xdef = x1 + b_def*(x2 - x1)
intercept_ydef = (y1 + b_def*(y2 - y1))
intercept_def = data.frame(def_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xdef),y_int = unlist(intercept_ydef))
intercept_def= intercept_def[which((y1-intercept_def$y_int)<=(y1-y2) & 0<(y1-intercept_def$y_int)),]
intercept_def$h_vel = sqrt(intercept_def$vel_x^2+intercept_def$vel_y^2) #hypotenuse velocity
intercept_def$h_dist = sqrt((intercept_def$x_ft-intercept_def$x_int)^2+(intercept_def$y_ft-intercept_def$y_int)^2)
intercept_def$v_dist = sqrt(intercept_def$vel_x^2+intercept_def$vel_y^2)
intercept_def$hv_dist = sqrt((intercept_def$x_ft+intercept_def$vel_x-intercept_def$x_int)^2+(intercept_def$y_ft+intercept_def$vel_y-intercept_def$y_int)^2)
intercept_def$int_angle = acos((intercept_def$h_dist^2+intercept_def$v_dist^2-intercept_def$hv_dist^2)/(2*intercept_def$h_dist*intercept_def$v_dist))
#law of cosines b2=a2+c2-2accos(b), angle in radians
intercept_def$puck_2_p = sqrt((x_puck-intercept_def$x_int)^2+(y_puck-intercept_def$y_int)^2)/s
intercept_def$player_2_p = sqrt((intercept_def$x_ft-intercept_def$x_int)^2+(intercept_def$y_ft-intercept_def$y_int)^2)/intercept_def$h_vel
b_off = -((x1-blockers_xoff)*(x2-x1)+(y1-blockers_yoff)*(y2-y1))/((x2-x1)^2+(y2-y1)^2)
intercept_xoff = x1 + b_off*(x2 - x1)
intercept_yoff = (y1 + b_off*(y2 - y1))
intercept_off = data.frame(off_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xoff),y_int = unlist(intercept_yoff))
intercept_off= intercept_off[which((y1-intercept_off$y_int)<=(y1-y2) & 0<(y1-intercept_off$y_int)),]
intercept_off$h_vel = sqrt(intercept_off$vel_x^2+intercept_off$vel_y^2) #hypotenuse velocity
intercept_off$h_dist = sqrt((intercept_off$x_ft-intercept_off$x_int)^2+(intercept_off$y_ft-intercept_off$y_int)^2)
intercept_off$v_dist = sqrt(intercept_off$vel_x^2+intercept_off$vel_y^2)
intercept_off$hv_dist = sqrt((intercept_off$x_ft+intercept_off$vel_x-intercept_off$x_int)^2+(intercept_off$y_ft+intercept_off$vel_y-intercept_off$y_int)^2)
intercept_off$int_angle = acos((intercept_off$h_dist^2+intercept_off$v_dist^2-intercept_off$hv_dist^2)/(2*intercept_off$h_dist*intercept_off$v_dist))
#law of cosines b2=a2+c2-2accos(b), angle in radians
intercept_off$puck_2_p = sqrt((x_puck-intercept_off$x_int)^2+(y_puck-intercept_off$y_int)^2)/s
intercept_off$player_2_p = sqrt((intercept_off$x_ft-intercept_off$x_int)^2+(intercept_off$y_ft-intercept_off$y_int)^2)/intercept_off$h_vel
plot_rink(ggplot(tracks)) +
geom_point(aes(x = x_ft, y = y_ft, fill = team_name), size = 5, shape = 21) +
geom_text(aes(x = x_ft, y = y_ft, label = jersey_number, colour = team_name), size = 3) +
geom_point(aes(x = x_puck, y = y_puck), size = 3, shape = 4) +
geom_point(data = points, aes(x = x_coor, y = y_coor), size = 2, shape = 4) +
geom_point(data =intercept_def,aes(x = x_int, y = y_int),color='light blue', size = 3, shape = 8) +
geom_point(data =intercept_off,aes(x = x_int, y = y_int),color='pink', size = 3, shape = 8) +
scale_colour_manual(values = c("USA" = "white", "Canada" = "white")) +
scale_fill_manual(values = c("USA" = "blue", "Canada" = "red")) +
geom_segment(data = points,aes(x = x_puck, y = y_puck, xend = x_coor, yend = y_coor),linetype=2)+
labs(fill = "Team") +
guides(colour = "none")+
geom_segment(aes(x = x_ft, y = y_ft, xend = x_ft+vel_x, yend = y_ft+vel_y), #/sqrt(vel_x^2+vel_y^2) to get r=1
arrow = arrow(length = unit(0.2, "cm")),size=1, colour='cyan')
list(def_min,off_min,intercept_def, intercept_off)
s=40 #40 m/s puck speed
teams = tracks$team_name %>% unique()
defence = teams[-which(teams==offence)]
off_tracks = tracks %>% filter(team_name==offence)
def_tracks = tracks %>% filter(team_name==defence)
off_time_2_p = sqrt((points$'x_coor'-off_tracks$x_ft)^2+(points$'y_coor'-off_tracks$y_ft)^2)
off_min = off_tracks[which.min(off_time_2_p),]
off_min$min_d=min(off_time_2_p)
off_min$puck_2_p = sqrt((points$'x_coor'-x_puck)^2+(points$'y_coor'-y_puck)^2)/s
off_min$player_2_p = min(off_time_2_p)/sqrt(off_min$vel_x^2+off_min$vel_y^2)
def_time_2_p = sqrt((points$'x_coor'-def_tracks$x_ft)^2+(points$'y_coor'-def_tracks$y_ft)^2)
def_min = cbind(def_tracks[which.min(def_time_2_p),],min=min(def_time_2_p))
def_min$min_d=min(def_time_2_p)
def_min$puck_2_p = off_min$puck_2_p
def_min$player_2_p = min(def_time_2_p)/sqrt(def_min$vel_x^2+def_min$vel_y^2)
target_x = points$x_coor; target_y=points$y_coor
defenders_x=x_puck; defenders_y=y_puck
speed=10; dir=points$angle*180/pi
blockers_xdef=def_tracks[,'x_ft']; blockers_ydef=def_tracks[,'y_ft']
blockers_xoff=off_tracks[,'x_ft']; blockers_yoff=off_tracks[,'y_ft']
reaction_time = 0; max_speed = 20; blocker_time_multiplier = 5
# i. Determine defenders' positions after reaction_time total seconds at their same speed and direction
angle = case_when(
dir <= 90 ~ 90 - dir,
dir > 90 & dir < 180 ~ dir - 90,
dir > 180 & dir < 270 ~ 270 - dir,
TRUE ~ dir - 270
)
reaction_x = defenders_x + ifelse(dir < 180, cos(angle * pi/180)*(speed * reaction_time), -cos(angle * pi / 180)*(speed * reaction_time))
reaction_y = defenders_y + ifelse(dir > 90 & dir < 270, sin(angle * pi/180)*(speed * reaction_time), -sin((angle * pi)/180)*(speed * reaction_time))
# Set (x1,y1) = location of defender after reaction time, (x2,y2) = target location, (x3,y3) = blocker location
i=1;k=1
x1 = reaction_x[i]; y1 = reaction_y[i]
x2 = target_x[k]; y2 = target_y[k]
# Calculate the perpendicular projection of the blocker's position onto the line formed by the defender and the target
b_def = -((x1-blockers_xdef)*(x2-x1)+(y1-blockers_ydef)*(y2-y1))/((x2-x1)^2+(y2-y1)^2)
intercept_xdef = x1 + b_def*(x2 - x1)
intercept_ydef = (y1 + b_def*(y2 - y1))
intercept_def = data.frame(def_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xdef),y_int = unlist(intercept_ydef))
intercept_def= intercept_def[which((y1-intercept_def$y_int)<=(y1-y2) & 0<(y1-intercept_def$y_int)),]
intercept_def$h_vel = sqrt(intercept_def$vel_x^2+intercept_def$vel_y^2) #hypotenuse velocity
intercept_def$h_dist = sqrt((intercept_def$x_ft-intercept_def$x_int)^2+(intercept_def$y_ft-intercept_def$y_int)^2)
intercept_def$v_dist = sqrt(intercept_def$vel_x^2+intercept_def$vel_y^2)
intercept_def$hv_dist = sqrt((intercept_def$x_ft+intercept_def$vel_x-intercept_def$x_int)^2+(intercept_def$y_ft+intercept_def$vel_y-intercept_def$y_int)^2)
intercept_def$int_angle = acos((intercept_def$h_dist^2+intercept_def$v_dist^2-intercept_def$hv_dist^2)/(2*intercept_def$h_dist*intercept_def$v_dist))
#law of cosines b2=a2+c2-2accos(b), angle in radians
intercept_def$puck_2_p = sqrt((x_puck-intercept_def$x_int)^2+(y_puck-intercept_def$y_int)^2)/s
intercept_def$player_2_p = sqrt((intercept_def$x_ft-intercept_def$x_int)^2+(intercept_def$y_ft-intercept_def$y_int)^2)/intercept_def$h_vel
b_off = -((x1-blockers_xoff)*(x2-x1)+(y1-blockers_yoff)*(y2-y1))/((x2-x1)^2+(y2-y1)^2)
intercept_xoff = x1 + b_off*(x2 - x1)
intercept_yoff = (y1 + b_off*(y2 - y1))
intercept_off = data.frame(off_tracks[,c(3:8,11:13)],x_int = unlist(intercept_xoff),y_int = unlist(intercept_yoff))
intercept_off= intercept_off[which((y1-intercept_off$y_int)<=(y1-y2) & 0<(y1-intercept_off$y_int)),]
intercept_off$h_vel = sqrt(intercept_off$vel_x^2+intercept_off$vel_y^2) #hypotenuse velocity
intercept_off$h_dist = sqrt((intercept_off$x_ft-intercept_off$x_int)^2+(intercept_off$y_ft-intercept_off$y_int)^2)
intercept_off$v_dist = sqrt(intercept_off$vel_x^2+intercept_off$vel_y^2)
intercept_off$hv_dist = sqrt((intercept_off$x_ft+intercept_off$vel_x-intercept_off$x_int)^2+(intercept_off$y_ft+intercept_off$vel_y-intercept_off$y_int)^2)
intercept_off$int_angle = acos((intercept_off$h_dist^2+intercept_off$v_dist^2-intercept_off$hv_dist^2)/(2*intercept_off$h_dist*intercept_off$v_dist))
#law of cosines b2=a2+c2-2accos(b), angle in radians
intercept_off$puck_2_p = sqrt((x_puck-intercept_off$x_int)^2+(y_puck-intercept_off$y_int)^2)/s
intercept_off$player_2_p = sqrt((intercept_off$x_ft-intercept_off$x_int)^2+(intercept_off$y_ft-intercept_off$y_int)^2)/intercept_off$h_vel
plot_rink(ggplot(tracks)) +
geom_point(aes(x = x_ft, y = y_ft, fill = team_name), size = 5, shape = 21) +
geom_text(aes(x = x_ft, y = y_ft, label = jersey_number, colour = team_name), size = 3) +
geom_point(aes(x = x_puck, y = y_puck), size = 3, shape = 4) +
geom_point(data = points, aes(x = x_coor, y = y_coor), size = 2, shape = 4) +
geom_point(data =intercept_def,aes(x = x_int, y = y_int),color='light blue', size = 3, shape = 8) +
geom_point(data =intercept_off,aes(x = x_int, y = y_int),color='pink', size = 3, shape = 8) +
scale_colour_manual(values = c("USA" = "white", "Canada" = "white")) +
scale_fill_manual(values = c("USA" = "blue", "Canada" = "red")) +
geom_segment(data = points,aes(x = x_puck, y = y_puck, xend = x_coor, yend = y_coor),linetype=2)+
labs(fill = "Team") +
guides(colour = "none")+
geom_segment(aes(x = x_ft, y = y_ft, xend = x_ft+vel_x, yend = y_ft+vel_y), #/sqrt(vel_x^2+vel_y^2) to get r=1
arrow = arrow(length = unit(0.2, "cm")),size=1, colour='cyan')
list(def_min,off_min,intercept_def, intercept_off)

"0","save_play <- function(t_start){#r,t_start,t_end,type){"
"0","  r=2"
"0","  library(""rjson"")"
"0","  library(""jsonlite"")"
"0","  library(""tidyverse"")"
"0","  library(""gganimate"")"
"0","  line1 <- paste('dat$relevant_events$\'',r,'\'$tracks$\'',t_start,'\'',sep='')"
"0","  line2 <- eval(parse(text=line1))"
"0","  if(length(line2$frame_id)!=0){"
"0","    json_tracks <- lapply(line2, function(x) {"
"0","      x[sapply(x, is.null)] <- NA"
"0","      unlist(x)"
"0","    })"
"0","    tracking_data <- as.data.frame(do.call(""cbind"", json_tracks))"
"0","    teams <- unique(tracking_data$team_name)"
"0","  team1 <- teams[1]"
"0","  team2 <- teams[2]"
"0","  title = paste(""Figures/PP"", r, ""_"", team1, ""_"", team2, ""_SS"", t_start, sep = """")"
"0",""
"0","  #if(t_start!=t_end){"
"0","   # title = paste(""Figures/PP"", r, ""_"", unique(tracking_data$team_name)[1], ""_"", unique(tracking_data$team_name)[2], ""_SS"", t_start,""_"",t_end, sep = """")"
"0","    #for(t in (t_start+1):t_end){"
"0","     # line1 <- paste('dat$relevant_events$\'',r,'\'$tracks$\'',t,'\'',sep='')"
"0","      #line2 <- eval(parse(text=line1))"
"0","      #if(length(line2$frame_id)!=0){"
"0","       # json_tracks <- lapply(line2, function(x) {"
"0","        #  x[sapply(x, is.null)] <- NA"
"0","         # unlist(x)"
"0","        #})"
"0","        #tracking_data <- rbind(tracking_data,as.data.frame(do.call(""cbind"", json_tracks)))"
"0","      #}"
"0","    #}"
"0","  #}"
"0","  "
"0","  tracking_data$frame_id = tracking_data$frame_id %>% as.integer()"
"0","  tracking_data$period = tracking_data$period %>% as.integer()"
"0","  tracking_data$track_id = tracking_data$track_id %>% as.integer()"
"0","  tracking_data$jersey_number = tracking_data$jersey_number %>% as.integer()"
"0","  tracking_data$x_ft = tracking_data$x_ft %>% as.double()"
"0","  tracking_data$y_ft = tracking_data$y_ft %>% as.double()"
"0","  "
"0","  # Using group_by and nest in R allows us to split data into smaller more manageable sub-data frames"
"0","  tracking_data_nested = tracking_data %>%"
"0","    group_by(frame_id) %>%"
"0","    nest()"
"0","  "
"0","  "
"0","  # We can perform transformations on the nested data using mutate and map"
"0","  tracking_data_player_count = tracking_data_nested %>%"
"0","    mutate(num_players = map(.x = data, .f = ~nrow(.x)))"
"0","  "
"0","  "
"0","  "
"0","  "
"0","  ## ANIMATED PLOTS ##"
"0","  "
"0","  # Set the specs for the gif we want to create (lower res to make it run quicker)"
"0","  options(gganimate.dev_args = list(width = 10, height = 6, units = 'in', res = 320))"
"0","  "
"0","  # Source in the plot_rink function"
"0","  source(""H:/Hockey/Big-Data-Cup-2022-Private-main/OTTHAC_Tutorial/Code/plot_rink.R"")"
"0","  #source(""/Volumes/BRICK_HOUSE/Hockey/Big-Data-Cup-2022-Private-main/OTTHAC_Tutorial/Code/plot_rink.R"")"
"0","  "
"0","  # Create a gif of this play"
"0","  p = plot_rink(ggplot(tracking_data)) +"
"0","    geom_point(aes(x = x_ft, y = y_ft, fill = team_name), shape = 21, size = 6) +"
"0","    geom_text(aes(x = x_ft, y = y_ft, label = jersey_number, colour = team_name), size = 3) +"
"0","    scale_colour_manual(values = c(""USA"" = ""white"", ""Canada"" = ""white"")) +"
"0","    scale_fill_manual(values = c(""USA"" = ""blue"", ""Canada"" = ""red"")) +"
"0","    transition_time(frame_id) +"
"0","    labs(fill = ""Team"") +"
"0","    guides(colour = ""none"")"
"0","  "
"0","  "
"0","  # Get the maximum and minimum frame number (so we know how long the gif should be)"
"0","  max_frame = tracking_data$frame_id %>% max()"
"0","  min_frame = tracking_data$frame_id %>% min() "
"0","  "
"0","  # Render the animation"
"0","  #if(type == ""mp4""){"
"0","    # Save as mp4"
"0","    p2 = animate(p, renderer = ffmpeg_renderer(), fps = 30, duration = (max_frame - min_frame)/30 + 1)"
"0","    anim_save(paste(title,"".mp4"",sep=""""), p2)"
"0","  #}else{"
"0","    #Save as gif"
"0","   # anim_save(paste(title,"".gif"",sep=""""), p, fps = 30, duration = (max_frame - min_frame)/30 + 1)"
"0","  #}"
"0","  }"
"0","}"
